#!/bin/sh

#
# midl-wrapper
#
# Wraps calls to the Microsoft IDL compiler (MIDL), with these aims:
#  - fix compile errors in output code that occur under GNU C compiler (gcc)
#  - use GNU C preprocessor (cpp)
#  - swallow stdout chatter
#

##
## Configuration
##

# Note: this mode requires functions which are missing from old versions
# of mingw w32api package. If you're getting link errors for missing
# NdrServerCall2() etc., one solution is to use -Oi. A better one is to
# use w32api 3.17.3 or better (FIXME: not yet released, I have a patch
# pending which hopefully will go in this release).
MIDL_STUB_MODE="-Oicf"

# Generate C code using GNU cpp to avoid requiring MSVC.
MIDL_C_OPTIONS="-cpp_cmd cpp -cpp_opt \"-E\" -char unsigned"

MIDL_OPTIONS="-nologo $MIDL_C_OPTIONS $MIDL_STUB_MODE"


##
## Preparation
##

while [ $# -gt 0 ]; do
  if [ "$1" = "-o" ]; then
    output_path=`cd $2; pwd`
    MIDL_OPTIONS="-out $output_path $MIDL_OPTIONS"
    shift 2
  elif [ "$1" = "-m" ]; then
    MIDL=$2
    shift 2
  else
    break
  fi
done

if [ "$1" = "" ] || [ "$1" == "--help" ]; then
  echo "\
Usage: $0 [-o DIR] [-m MIDL] IDL_FILE [ACL_FILE]

    -o DIR: place generated source files into DIR
    -m MIDL: location of MIDL.EXE"
  exit 255
fi


if [ "$MIDL" = "" ]; then
  MIDL=midl.exe
fi

if [ ! -x "$MIDL" ]; then
  echo "Unable to locate $MIDL"
  exit 2
fi

idl_file=$1
acf_file=$2

if [ ! -e "$idl_file" ]; then
  echo "Unable to locate $idl_file"
  exit 1
fi

if [ "$acf_file" != "" ] && [ -e "$acf_file" ]; then
  MIDL_OPTIONS="$MIDL_OPTIONS -acf $acf_file"
fi

extension=${idl_file##*.}
base=`basename "$idl_file" .$extension`

if [ -n "$output_path" ] && [ "$output_path" != "" ]; then
  base="$output_path/$base"
fi



##
## Execution
##

# Setting TMP in MSYS breaks MIDL.EXE (and other things)
TMP=/tmp


"$MIDL" $MIDL_OPTIONS $idl_file | sed -e /^Processing.*/d

##
## Fixing up output
##

RESULT=${PIPESTATUS[0]}
if [ $RESULT -ne 0 ]; then
  rm -f ${base}_c.c ${base}_s.s ${base}.h
  exit $RESULT
fi

# The generated code for some reason uses 'extern' for forward
# declarations of constants that are defined further down the same
# file. This (understandably) confuses gcc.
FIX_FORWARD_DECLS="s/extern const/static const/"

sed -i -e "$FIX_FORWARD_DECLS" "${base}_c.c"
sed -i -e "$FIX_FORWARD_DECLS" "${base}_s.c"
