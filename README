msrpc-mingw

This is a package to make it simpler to use Microsoft RPC from the mingw
compiler.


* Components:

bin/midl-wrapper:
  helper script which runs MIDL.EXE (the MS interface compiler) and cleans
  up its output so that it will compile with gcc.

msrpc.py:
  waf plugin to provide an 'msrpc' tool

m4macros/msrpc-mingw-1.0.m4:
  autoconf macro to detect MIDL.EXE and the msrpc libraries. It's
  recommended that you copy this to your source tree if you use it,
  because otherwise your app will depend on this package on every
  platform it supports.

msrpc-mingw library:
  minimal C library to save you from having to call lengthy Windows
  API functions.

msrpc-glib2 library:
  GLib integration

vapi/msrpc-1.0.vapi
  Vala integration

rpctester:
  Program used to run the tests.


* Requirements:

You currently need to patch the mingw w32api package (which provides the
C headers and libraries for the Windows API) to add some missing RPC functions.

The patch is on the mingw bug tracker:
  https://sourceforge.net/tracker/?func=detail&aid=3302807&group_id=2435&atid=302435

The source is here:
  http://sourceforge.net/projects/mingw/files/MinGW/BaseSystem/RuntimeLibrary/Win32-API/w32api-3.17/w32api-3.17-2-mingw32-src.tar.lzma/download

Alternatively, here is a ready-patched version which you can just unzip inside
your mingw base directory:
  http://afuera.me.uk/junk/w32api-3.17-2-mingw-patch3302807-dev.tar.lzma


* Further reading:

Tutorial:
  http://msdn.microsoft.com/en-us/library/aa379010%28v=VS.85%29.aspx

Protocol sequence options:
  http://technet.microsoft.com/en-us/library/cc738291(v=ws.10).aspx

Security considerations:
  http://msdn.microsoft.com/en-us/library/aa379441%28v=vs.85%29.aspx


* Why not use DBus?

DBus is a system component. An ideal port of DBus to Windows would maintain
the interface while using MS RPC underneath; it's simply wrong to require
another system service to be running on Windows which doesn't belong there.
Since this doesn't exist, the next-best thing is to use MS RPC directly.


* Why not use DCOM?

DCOM is actually built on top of MS RPC.
