import waflib.Context
import os

def build (bld):
	# msrpc-mingw/tests/vala/src
	src_dir = bld.path.find_dir('src')

	# msrpc-mingw/src
	local_msrpc_include_path = os.path.join(waflib.Context.top_dir, 'src')

	# msrpc-mingw/src
	vapi_path = bld.root.find_dir('vapi').abspath()

	kws = {
		'msrpc_interface': ['src/vala.idl', 'src/vala.acf'],
		'vapi_dirs': ['../../vapi', 'src'],
		'packages': ['gio-2.0', 'msrpc-1.0', 'vala-interface'],
		'use': ['msrpc-glib2', 'msrpc-mingw'],
		'uselib': 'RPC',
		'includes': [local_msrpc_include_path, src_dir.get_bld()],
		'install_path': False
	}

	bld (features = 'c cprogram msrpc_client',
	     source = 'src/client.vala',
	     target = 'client',
	     **kws)

	bld (features = 'c cprogram msrpc_server',
	     source = 'src/server.vala',
	     target = 'server',
	     **kws)


def check (bld):
	# FIXME: hardcoded because we don't execute the build() command so the
	# actual targets do not exist

	server_path = os.path.join (bld.path.get_bld().abspath(), 'server.exe')
	client_path = os.path.join (bld.path.get_bld().abspath(), 'client.exe')

	bld.run_tester ("vala", "%s %s" % (server_path, client_path))
