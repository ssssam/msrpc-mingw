import Logs

import os

def build (bld):
	# msrpc-mingw/tests/async/src
	src_dir = bld.path.find_dir('src')

	# msrpc-mingw/src
	local_msrpc_include_path = bld.root.find_dir('src').relpath()

	bld (features = 'c cprogram msrpc_client',
	     source = 'src/client.c',
	     msrpc_interface = ['src/async.idl', 'src/async.acf'],
	     target = 'client',
	     use = 'msrpc-mingw',
	     uselib = 'RPC',
	     includes = [local_msrpc_include_path, src_dir.get_bld()])

	bld (features = 'c cprogram msrpc_server',
	     source = 'src/server.c',
	     msrpc_interface = ['src/async.idl', 'src/async.acf'],
	     target = 'server',
	     use = 'msrpc-mingw',
	     uselib = 'RPC',
	     includes = [local_msrpc_include_path, src_dir.get_bld()])

def check (bld):
	tester = bld.get_tgen_by_name ('rpctester')
	tester_path = os.path.join (tester.path.get_bld().abspath(), tester.target)

	# FIXME: hardcoded because we don't execute the build() command so the
	# actual targets do not exist

	server_path = os.path.join (bld.path.get_bld().abspath(), 'server.exe')
	client_path = os.path.join (bld.path.get_bld().abspath(), 'client.exe')

	result = bld.exec_command ("%s %s %s" % (tester_path, server_path, client_path))

	if result == 0:
		Logs.info ("%s: PASSED\n" % bld.path)
	else:
		Logs.warn ("%s: FAILED\n" % bld.path)

	# How to do this:
	#  1. launch server using Popen
	#  2. wait for output "Server running"
	#  3. launch client
	#  4. check for server output
	#  5. check for client output
	#  6. yay!
